'''
Created on Sep 25, 2019

@author: dan trepanier
'''
import logging
import sys
import numpy as np
import time
import prettytable
import matplotlib.pyplot as plt
from multiprocessing import Pool
from statsmodels.tsa.arima_model import ARMA
# run a grid search of 5 by 5

class Arma(object):
    def __init__(self, X, metric='BIC'):
        assert metric in ('AIC','BIC','HQIC','MSE')
        self.X = X
        self.metric = metric
    
    def evaluate(self, arg):
        if arg == (0,0):
            return None
        try:
            logging.debug('running ARMA(%d,%d)' % arg)
            model = ARMA(self.X, order=arg)
            r = model.fit(trend='nc', method='css-mle',transparams=True)
            logging.debug('ran     ARMA(%d,%d) | AIC=%6.2f | BIC=%6.2f' % (arg[0], arg[1], r.aic, r.bic))
            if self.metric == 'BIC':    value = r.bic
            elif self.metric == 'AIC':  value = r.aic
            elif self.metric == 'HQIC': value = r.hqic
            elif self.metric == 'MSE':
                value = np.mean(r.sigma2) ** .5
            return value
        except:
            return None
    
def run_grid(X, max_order, metric='BIC', multi=True, evaluator=Arma):
    max_order += 1
    header = ['p\q'] + list(map(lambda q: 'q (%d)' % q, range(max_order)))
    start_time = time.time()
    
    params = []
    for p in range(max_order):
        for q in range(max_order):
            params += [(p,q)]
    e = evaluator(tuple(X), metric)
    if multi:
        resources = Pool(6)       
        results = resources.map(e.evaluate, params)
    else:
        results = map(lambda p: e.evaluate(p), params)
    table = prettytable.PrettyTable(header)
    P = []
    Q = []
    Z = []
    last_p = None
    result = {}
    bad = []
    row = None
    for ((p,q),value) in zip(params, results):
        if value is None or np.isnan(value):
            bad += [(p,q)]
            v = 'n/a'
        else:
            v = '%8.2F' % value
            result[(p,q)] = value
            P += [p]
            Q += [q]
            Z += [value]
        
        if p != last_p:
            if last_p is not None:
                table.add_row(row)
            row = ['p(%d)' % p, v]
        else:
            row += [v]    
        last_p = p
    print('ARMA Grid Search %d X %d\n' % (max_order, max_order))
    print(table)
    end_time = time.time()
    logging.debug('bad values: %s' % str(bad))
    print('time required', end_time - start_time)
    low = min(Z)
    high = max(Z)
    plt.scatter(P,Q,c=Z,cmap='seismic',vmin=low,vmax=high, s=2000)
    plt.xlabel('p')
    plt.ylabel('q')
    plt.show()
    return sorted(result.items(), key=lambda k:k[1])

if __name__ == '__main__':
    X=[0,-1.287393378406152,-0.24579509768679464,0.8615552714465864,1.3449171688316883,0.7713080644092223,
         0.3664535657131772,-0.4146574511306334,1.1313251389359493,1.4838221104164129,2.7408589054657644,
         2.84528857150399,3.599044287918084,4.940253479017819,3.2227650907182035,2.242649671919655,
         1.8331828427909904,1.6134683676555235,1.9963116518199426,0.9023502589574478,0.4442654010637911,
         0.6054368447317331,2.0794823363936774,0.7956931855088486,1.0592824452878726,-0.2457841665151944,
         -1.2514421000396654,-1.587593620781071,-0.657659529596883,-1.5467396807505318,-0.1516449859578496,
         0.20928690179069542,-0.34411326119803676,-0.1538367042662603,-0.20755308752369894,0.7850194022931408,
         -0.8395521429531341,-1.167617012971414,0.7090225335121161,1.2680427715099019,-0.3780865931134678,
         0.1739250418863724,-0.6664305854106727,-2.2419513268779507,-0.980882665165937,-1.2706264905484819,
         0.6051709719297707,0.9258949194237989,0.6463930026461151,-0.9383341418358067,-1.034739523749248,
         -0.40416689413458656,0.1662623216162879,-0.7626453677302287,-1.2395556326507318,-2.336834044079565,
         0.45052171692899146,-0.002796123772601078,0.16603368128780682,1.2490227022341576,1.8691474970975852,
         3.51076042811978,0.0014920068494181926,1.13448302038849,1.8556761313652228,1.114679469238111,
         0.4971790101789982,0.24862514338168806,0.3353516948312195,0.7814688246529525,0.8175474414267081,
         -0.0911770772239563,0.2807106385313157,0.9110517200769979,1.1978159167056082,0.6714112032071853,
         0.39725338624626383,1.4502580696287213,-1.2029975402784527,-0.7402489791509593,-0.6829612126856475,
         0.02209239778561034,-0.9780039545848759,-0.809163736209553,-1.8681616896622175,-0.4359559077894334,
         -0.8428212740558927,-1.4621695356088,-0.991113206175963,-0.8393007190652955,0.05772823827578211,
         -0.546846517901909,-1.1163743583045918,-1.639154463143799,-2.1370123976674096,-1.6061813203425572,
         -1.5979414310927964,-2.0327382753828798,-2.6395936396162165,-2.9462602235157758,-1.2735813340955433,
         -1.550755481931405,-3.150423288038356,-0.8268354515351819,-0.3648558395792282,
         0.46711924744193317,2.199081546266976,1.776749871294109,2.630362706240042,2.677262565046314,
         1.2812700818038008,1.1652611209451247,0.2651194085638885,0.15135499048075834,0.5038138232016177,
         -0.8812772557056309,-0.17714567948652554,1.0236432569198066,-0.0331561201374273,-0.19090714301340792,
         0.7220247939038098,0.041642400771761345,0.908513697461438,-0.05312177279482022,-1.172647207263716,
         -1.2392399363962365,0.1324583466929996,1.6621217018426568,-0.027655734419172573,-1.2294147071630273,
         -0.6908654816363388,0.6919305619061379,0.9776074277390655,-1.6740629369848754,-1.6479133160307264,
         -0.17589535003031276,1.4746675078043914,1.248614868977595,-0.02413582944176962,0.2963979749220803,
         0.9390394417981776,0.6845932914352402,-0.8775252195178747,-1.4782979680461568,-0.8600400226382244,
         -0.21903395606724968,-0.028920758496393695,-1.3147238340043583,-0.2733306577617094,0.29948452735395614,
         1.3023092290010583,0.31327946614218566,-0.6043435736053872,-0.4390536622866103,0.3999434564038129,
         -1.2926458516181092,0.7834967544588598,0.7649055791998223,-1.328542724474551,-0.922263024260069,
         -1.1470865584969385,-0.49783231258970434,-1.1823120824789246,-1.3887833836172012,0.48003885827306614,
         0.4993114464180064,-0.24643913788192356,0.008433574663140611,-0.2755869871905041,0.4876474509543988,
         -0.7109153877279217,-1.0980751440560788,0.5908312705044613,0.4462474897531235,-0.5997148947009334,
         0.5801638850445912,1.2550852924699654,-0.8933514847616683,-1.6940830610953794,0.07511389100984411,
         -0.7086803722558921,0.15984040467373484,0.0044656444287683224,2.0307956012643835,0.1479085916918661,
         -1.8622792975994438,-2.2383072060364304,-1.858482651588564,-0.27325856679810623,-0.41541996908167106,
         -0.11236623715294433,-0.6747047646320663,-1.1636975609571674,-1.6491083467012244,0.0025972334311199496,
         0.2453040434824595,2.0423759692255254,0.3124103864191895,2.0259811135074735,1.1528369637106008]
    
    r = run_grid(X, max_order=5, multi=False)
    print(r)
    